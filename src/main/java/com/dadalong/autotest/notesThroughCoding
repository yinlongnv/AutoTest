springboot已经自动配置了支持mongodb，在启动springboot时会自动实例化一个mongo实例，需要禁用springboot自带的配置。

StringUtils中 isNotEmpty 和isNotBlank的区别:
isNotEmpty ：
判断某字符串是否非空
StringUtils.isNotEmpty(null) = false
StringUtils.isNotEmpty("") = false
StringUtils.isNotEmpty(" ") = true
StringUtils.isNotEmpty("bob") = true

isNotBlank：
判断某字符串是否不为空且长度不为0且不由空白符(whitespace)构成，
下面是示例：
StringUtils.isNotBlank(null) = false
StringUtils.isNotBlank("") = false
StringUtils.isNotBlank(" ") = false
StringUtils.isNotBlank("\t \n \f \r") = false

mybatis-plus：
like：
like(boolean condition, String column, String value)
like(String column, String value)
like(boolean condition, String column, String value, SqlLike type)
like(String column, String value, SqlLike type)

BaseMapper：
selectOne查询无数据时需要判空处理，要不然会报空指针异常

Date：
HH返回的是24小时制的时间
hh返回的是12小时制的时间

java.lang.IndexOutOfBoundsException数组下标越界异常

Python：
soup.tag：获取所有内容中第一个符合要求的标签；
soup.tag.name：标签本身名；
soup.tag.attrs或soup.tag['attrs']或soup.tag.get('attrs')：该标签所有属性，字典表示；

.strip()：去前后空格
.lstrip()：去左边空格
.rstrip()：去右边空格

%y 两位数的年份表示（00-99）
%Y 四位数的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小时制小时数（0-23）
%I 12小时制小时数（01-12）
%M 分钟数（00=59）
%S 秒（00-59）

——python存入数据库要字符串形式

安装了pymysql和BeautifulSoup4但import 时显示No module named 'pymysql'问题：
——原因是在cmd命令行中 使用pip install pymysql 安装好是将这个包安装到了python3中，但是在Anaconde运行环境中没有这些包

bs4.FeatureNotFound: Couldn't find a tree builder with the features you requested: html5lib. Do you need to install a parser library?：
——Use 'html.parser' instead of 'html5lib'. This will work.

python脚本跑三条就不跑了，因为太多print语句影响了缓存
——去除所有的print语句

python解析同级的html。。。基本可以了，太难啦！

JsonArray、JsonObject、List、String不想再碰了。

字符串转数组：
List<String> strings = new ArrayList<>();
String [] strArr= caseRules.getOptions().split(",");
strings.addAll(Arrays.asList(strArr));
字符串转对象：
Myclass myclass = JSONObject.parseObject(jsonStr , Myclass.class);// jsonStr 是String类型。
数组转字符串：

pairwise：
iterable：可迭代序列，可被遍历的结构；
tuple(iterable)：将可迭代序列转换成元组形式，类似(1, 2, 3, 4)；
str()：转换成字符串；
eval()：执行字符串表达式，并返回表达式的值；
itertools.product(iterable)：对可迭代序列进行笛卡尔积全组合排列处理；
itertools.combinations(iterable, r)：创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序；
copy.deepcopy(iterable)：深拷贝
list.index(x[, start[, end]])：x——查找的对象；start——可选，查找的起始位置；end——可选，查找的结束位置。

//        XmlSuite suite = new XmlSuite();
//        suite.setName("演训产品中心API接口测试套件");
//        XmlTest test = new XmlTest(suite);
//        test.setName("演训产品中心API接口测试用例");
//        List<XmlClass> classes = new ArrayList<>();
//        XmlClass xmlClass = new XmlClass("com.dadalong.autotest.testng.TestCases");
//        String postData = "{\"username\":\"大大龙\",\"password\":\"123456\",\"lastIp\":\"127.0.0.1\"}";
//        String postUrl = "http://localhost:9001/user/login";
//        Map<String, String> map = new HashMap<>();
//        map.put("postUrl", postUrl);
//        map.put("postData", postData);
//        xmlClass.setParameters(map);
//        classes.add(xmlClass);
//        test.setXmlClasses(classes);
//        suite.addListener("com.dadalong.autotest.utils.ExtentTestNGIReportListenerUtils");
//        List<XmlSuite> suites = new ArrayList<XmlSuite>();
//        suites.add(suite);
//        TestNG testNG = new TestNG();
//        testNG.setXmlSuites(suites);
//        testNG.run();